<?php
namespace Modules\Space\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Modules\Location\Models\LocationCategory;
use Modules\Space\Models\Space;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use Modules\User\Models\UserCompare;
use Illuminate\Support\Facades\DB;

class SpaceController extends Controller
{
    protected $spaceClass;
    protected $locationClass;
    protected $userCompareClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct()
    {
        $this->spaceClass = Space::class;
        $this->locationClass = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
        $this->userCompareClass = UserCompare::class;
    }

    public function callAction($method, $parameters)
    {
        if(!Space::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $compare_data=DB::select('select bravo_spaces.*, t0.user_id as compare_user from bravo_spaces INNER JOIN user_compare as t0 on bravo_spaces.id=t0.object_id where t0.user_id =?',[Auth::id()]);
        $sale_class=-1;
        $bedroom_class=$request->bedroom_class;
        $garage_class=$request->garage_class;
        $price_range=$request->price_range;
        $is_ajax = $request->query('_ajax');
        $list = call_user_func([$this->spaceClass,'search'],$request);
        
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $key => $row) {
                if ($row->search_class <> $sale_class && $sale_class<>(-1)){
                    unset($list[$key]);
                }
                if($bedroom_class>0){
                    if ($row->bed < $bedroom_class){
                        unset($list[$key]);
                    }
                }
                if($garage_class>0){
                    if ($row->garage < $garage_class){
                        unset($list[$key]);
                    }
                }
            }
        }
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Space::frontend.layouts.search.loop-grid', ['row' => $row,'disable_lazyload'=>1,'wrap_class'=>'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("space_icon_marker_map"),'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if( empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal" ){
            $limit_location = 1000;
        }
        $data = [
            'price_range'=>$price_range,
            'sale_class'=>$sale_class,
            'bedroom_class'=>$bedroom_class,
            'garage_class'=>$garage_class,
            'rows'               => $list,
            'side_row'      =>$compare_data,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
            'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
            'space_min_max_square' => $this->spaceClass::getMinMaxSquare(),
            'markers'            => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1 ,
            "seo_meta"           => $this->spaceClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position","desc")->with(['terms','translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }
    public function search_rent(Request $request)
    {
        $compare_data=DB::select('select bravo_spaces.*, t0.user_id as compare_user from bravo_spaces INNER JOIN user_compare as t0 on bravo_spaces.id=t0.object_id where t0.user_id =?',[Auth::id()]);
        $sale_class=0;
        $list=array();
        $is_ajax = $request->query('_ajax');
        $list = call_user_func([$this->spaceClass,'search'],$request);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $key => $row) {
                if ($row->search_class <> 0){
                    unset($list[$key]);
                }
            }
        }
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Space::frontend.layouts.search.loop-grid', ['row' => $row,'disable_lazyload'=>1,'wrap_class'=>'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("space_icon_marker_map"),'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if( empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal" ){
            $limit_location = 1000;
        }
        $data = [
            'sale_class'=>$sale_class,
            'rows'               => $list,
            'side_row'      =>$compare_data,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
            'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
            'space_min_max_square' => $this->spaceClass::getMinMaxSquare(),
            'markers'            => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1 ,
            "seo_meta"           => $this->spaceClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position","desc")->with(['terms','translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }
    public function search_sale(Request $request)
    {
        $compare_data=DB::select('select bravo_spaces.*, t0.user_id as compare_user from bravo_spaces INNER JOIN user_compare as t0 on bravo_spaces.id=t0.object_id where t0.user_id =?',[Auth::id()]);

        $sale_class=1;
        $list=array();
        $is_ajax = $request->query('_ajax');
        $list = call_user_func([$this->spaceClass,'search'],$request);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $key => $row) {
                if ($row->search_class <> 1){
                    unset($list[$key]);
                }
            }
        }
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Space::frontend.layouts.search.loop-grid', ['row' => $row,'disable_lazyload'=>1,'wrap_class'=>'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("space_icon_marker_map"),'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if( empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal" ){
            $limit_location = 1000;
        }
        $data = [
            'sale_class'=>$sale_class,
            'rows'               => $list,
            'side_row'      =>$compare_data,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
            'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
            'space_min_max_square' => $this->spaceClass::getMinMaxSquare(),
            'markers'            => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1 ,
            "seo_meta"           => $this->spaceClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position","desc")->with(['terms','translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }
    public function search_sold(Request $request)
    {
        $compare_data=DB::select('select bravo_spaces.*, t0.user_id as compare_user from bravo_spaces INNER JOIN user_compare as t0 on bravo_spaces.id=t0.object_id where t0.user_id =?',[Auth::id()]);

        $sale_class=2;
        $list=array();
        $is_ajax = $request->query('_ajax');
        $list = call_user_func([$this->spaceClass,'search'],$request);
        $markers = [];
        if (!empty($list)) {
            foreach ($list as $key => $row) {
                if ($row->search_class <> 2){
                    unset($list[$key]);
                }
            }
        }
        if (!empty($list)) {
            foreach ($list as $row) {
                $markers[] = [
                    "id"      => $row->id,
                    "title"   => $row->title,
                    "lat"     => (float)$row->map_lat,
                    "lng"     => (float)$row->map_lng,
                    "gallery" => $row->getGallery(true),
                    "infobox" => view('Space::frontend.layouts.search.loop-grid', ['row' => $row,'disable_lazyload'=>1,'wrap_class'=>'infobox-item'])->render(),
                    'marker' => get_file_url(setting_item("space_icon_marker_map"),'full') ?? url('images/icons/png/pin.png'),
                ];
            }
        }
        $limit_location = 15;
        if( empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal" ){
            $limit_location = 1000;
        }
        $data = [
            'sale_class'=>$sale_class,
            'rows'               => $list,
            'side_row'      =>$compare_data,
            'list_location'      => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
            'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
            'space_min_max_square' => $this->spaceClass::getMinMaxSquare(),
            'markers'            => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1 ,
            "seo_meta"           => $this->spaceClass::getSeoMetaForPageList()
        ];
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            return $this->sendSuccess([
                'html'    => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                "markers" => $data['markers']
            ]);
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position","desc")->with(['terms','translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }
    public function detail(Request $request, $slug)
    {
        $compare_data=DB::select('select bravo_spaces.*, t0.user_id as compare_user from bravo_spaces INNER JOIN user_compare as t0 on bravo_spaces.id=t0.object_id where t0.user_id =?',[Auth::id()]);
        // $compare_data=Space::query()->select("bravo_spaces.*")
        //         ->join('user_compare', function ($join) {
        //             $join->on('bravo_spaces.id', '=', 'user_compare.object_id');
        //         })
        //         ->where('user_compare.user_id', '=', Auth::id());
        $row = $this->spaceClass::where('slug', $slug)->with(['location','translations','hasWishList'])->first();
        if ( empty($row) or !$row->hasPermissionDetailView()) {
            return redirect('/');
        }
        $translation = $row->translateOrOrigin(app()->getLocale());
        $space_related = [];
        $location_id = $row->location_id;
        if (!empty($location_id)) {
            $space_related = $this->spaceClass::where('location_id', $location_id)->where("status", "publish")->take(4)->whereNotIn('id', [$row->id])->with(['location','translations','hasWishList'])->get();
        }
        $review_list = $row->getReviewList();
        $data = [
            'row'          => $row,
            'side_row'      =>$compare_data,
            'translation'       => $translation,
            'space_related' => $space_related,
            'location_category'=>$this->locationCategoryClass::where("status", "publish")->with('location_category_translations')->get(),
            'booking_data' => $row->getBookingData(),
            'review_list'  => $review_list,
            'seo_meta'  => $row->getSeoMetaWithTranslation(app()->getLocale(),$translation),
            'body_class'=>'is_single'
        ];
        $this->setActiveMenu($row);
        return view('Space::frontend.detail', $data);
    }
    public function compare_properties(Request $request){
        $id=$request->id;
        $row=DB::select('select bravo_spaces.*, t0.user_id as compare_user from bravo_spaces INNER JOIN user_compare as t0 on bravo_spaces.id=t0.object_id where t0.user_id =?',[$id]);
        $data = [
            'rows'          => $row,
        ];
        return view('Space::frontend.compare_properties',$data);
    }
    public function remove_compareitem(Request $request){
        $id=$request->id;
        $delete_data=DB::select('Delete from user_compare where object_id=? and user_id=?',[$id,Auth::id()]);
        return back()->withInput();
    }
    public function remove_allcompare(Request $request){
        $id=$request->id;
        $delete_data=DB::select('Delete from user_compare where user_id=?',[$id]);
        return back()->withInput();
    }
    public function download_excel(Request $request){
        $id=$request->id;
        $data = Space::where('id', $id)->first();
        $filename = "Download_" . date('Y-m-d H:i') . ".csv";
        $delimiter = ",";
        // Create a file pointer
        $f = fopen('php://memory', 'w');
        $fields = array('SN', 'Title', 'Status', 'Room', 'Bed', 'Bath', 'Garages', 'Year Built', 'Home area','Lot area','Price $','Sale Price $', 'Energy','Energy Index');
        if($data->search_class==0){
            $status="For Rent";
        }else if($data->search_class==1){
            $status="For Sale";
        }else{
            $status="Sold";
        }
        fputcsv($f, $fields, $delimiter);
        if (!empty($data)) {
            $lineData = array($id, $data->title,$status,$data->room,$data->bed,$data->bathroom,$data->garage,$data->builtyear,$data->homesquare,$data->square,$data->price,$data->sale_price,$data->energy_class,$data->energy_index );
            fputcsv($f, $lineData, $delimiter);
        }
        fseek($f, 0);
        // Set headers to download file rather than displayed
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="' . $filename . '";');
        fpassthru($f);
        exit;
    }
}
